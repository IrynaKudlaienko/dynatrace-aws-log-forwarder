#   Copyright 2021 Dynatrace LLC
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

AWSTemplateFormatVersion: "2010-09-09"
Description: Dynatrace - AWS Logs Ingest

Parameters:
  DynatraceEnvironmentUrl:
    Description: URL to Dynatrace environment
    Type: String
  DynatraceApiKey:
    Description: Dynatrace API key
    Type: String
    NoEcho: true
  VerifySSLTargetActiveGate:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: "If false, expect target ActiveGate to have a self-signed SSL certificate and do not verify its validity"
    Type: String

Resources:
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def handler(event, context):
            raise Exception("Dynatrace Logs Lambda has not been uploaded")
      Handler: index.handler
      Runtime: python3.8
      MemorySize: 256
      Timeout: 60
      Environment:
        Variables:
          DEBUG: 'false'
          DYNATRACE_API_KEY: !Ref DynatraceApiKey
          DYNATRACE_ENV_URL: !Ref DynatraceEnvironmentUrl
          VERIFY_SSL: !Ref VerifySSLTargetActiveGate
      Role: !GetAtt LambdaRole.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: 'CloudwatchPutMetricData'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'cloudwatch:PutMetricData'
                Resource: '*'

  FirehoseLogStreams:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt DeliveryBucket.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        CompressionFormat: GZIP
        ErrorOutputPrefix: 'error-'
        Prefix: 'success-'
        ProcessingConfiguration:
          Enabled: 'true'
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt Lambda.Arn
              Type: Lambda
        RoleARN: !GetAtt DeliveryStreamRole.Arn

  DeliveryBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: '7'
            Status: 'Enabled'

  DeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: firehose_delivery_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource:
                  - !GetAtt DeliveryBucket.Arn
                  - !Join [ '/', [ !GetAtt DeliveryBucket.Arn, '*' ] ]
        - PolicyName: firehose_lambda_invocation_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:GetFunctionConfiguration'
                Resource:
                  - !GetAtt Lambda.Arn

  CloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'firehose:PutRecord'
                  - 'firehose:PutRecordBatch'
                Resource: !GetAtt FirehoseLogStreams.Arn
      Description: Role for Subscription Filters (to write to Firehose)

  SelfMonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub
        - "DynatraceLogForwarder-SelfMonitoring-${__Region__}-${__StackName__}"
        - __StackName__: !Ref 'AWS::StackName'
          __Region__: !Ref 'AWS::Region'
      DashboardBody: !Sub
        - |
          {
              "widgets": [
                  {
                      "height": 6,
                      "width": 12,
                      "y": 6,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ "DT/LogsStreaming", "Kinesis record age", "function_name", "${__LambdaName__}", { "stat": "Minimum" } ],
                              [ "...", { "stat": "Average" } ],
                              [ "..." ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${__Region__}",
                          "stat": "Maximum",
                          "period": 60,
                          "liveData": true,
                          "setPeriodToTimeRange": true,
                          "legend": {
                              "position": "bottom"
                          },
                          "title": "Kinesis - record age"
                      }
                  },
                  {
                      "height": 6,
                      "width": 12,
                      "y": 12,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ "DT/LogsStreaming", "Kinesis record.data decompressed size", "function_name", "${__LambdaName__}" ],
                              [ "...", { "stat": "Average" } ],
                              [ "...", { "stat": "Maximum" } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${__Region__}",
                          "stat": "Minimum",
                          "period": 60,
                          "title": "Kinesis - record.data decompressed size"
                      }
                  },
                  {
                      "height": 6,
                      "width": 12,
                      "y": 12,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ "DT/LogsStreaming", "Kinesis record.data compressed size", "function_name", "${__LambdaName__}" ],
                              [ "...", { "stat": "Average" } ],
                              [ "...", { "stat": "Maximum" } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${__Region__}",
                          "stat": "Minimum",
                          "period": 60,
                          "title": "Kinesis - record.data compressed size"
                      }
                  },
                  {
                      "height": 6,
                      "width": 12,
                      "y": 6,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ "DT/LogsStreaming", "Kinesis record age", "function_name", "${__LambdaName__}", { "label": "Kinesis records" } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${__Region__}",
                          "stat": "SampleCount",
                          "period": 60,
                          "title": "Kinesis - records number"
                      }
                  },
                  {
                      "height": 6,
                      "width": 12,
                      "y": 18,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH('{DT/LogsStreaming,function_name,log_group} function_name=\"${__LambdaName__}\" MetricName=\"Log entries by LogGroup\"', 'Sum', 60)", "label": "Log entries - [${!PROP('Dim.log_group')}]", "id": "e1", "region": "${__Region__}" } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${__Region__}",
                          "period": 300,
                          "stat": "Average",
                          "title": "Log Groups - log entries"
                      }
                  },
                  {
                      "height": 6,
                      "width": 12,
                      "y": 18,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH('{DT/LogsStreaming,function_name,log_group} function_name=\"${__LambdaName__}\" MetricName=\"Log content length by LogGroup\"', 'Sum', 60)", "label": "Log content length -  [${!PROP('Dim.log_group')}]", "id": "e1", "region": "${__Region__}" } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${__Region__}",
                          "period": 300,
                          "stat": "Average",
                          "title": "Log Groups - log content length"
                      }
                  },
                  {
                      "height": 6,
                      "width": 12,
                      "y": 30,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ "DT/LogsStreaming", "Batches prepared", "function_name", "${__LambdaName__}" ],
                              [ ".", "Batches delivered", ".", "." ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${__Region__}",
                          "stat": "Sum",
                          "period": 60,
                          "title": "Delivery - batches"
                      }
                  },
                  {
                      "height": 6,
                      "width": 12,
                      "y": 30,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ "DT/LogsStreaming", "Log entries prepared", "function_name", "${__LambdaName__}" ],
                              [ ".", "Log entries delivered", ".", "." ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${__Region__}",
                          "stat": "Sum",
                          "period": 60,
                          "title": "Delivery - log entries"
                      }
                  },
                  {
                      "height": 6,
                      "width": 12,
                      "y": 36,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ "DT/LogsStreaming", "Data volume prepared", "function_name", "${__LambdaName__}" ],
                              [ ".", "Data volume delivered", ".", "." ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${__Region__}",
                          "title": "Delivery - data volume",
                          "period": 60,
                          "stat": "Sum"
                      }
                  },
                  {
                      "height": 6,
                      "width": 12,
                      "y": 42,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH('{DT/LogsStreaming,function_name,status_code} function_name=\"${__LambdaName__}\" MetricName=\"Requests status code count\"', 'Sum', 60)", "label": "Status code - [${!PROP('Dim.status_code')}]", "id": "e1", "region": "${__Region__}" } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${__Region__}",
                          "title": "Requests - status codes",
                          "period": 300,
                          "stat": "Average"
                      }
                  },
                  {
                      "height": 6,
                      "width": 12,
                      "y": 42,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ "DT/LogsStreaming", "Requests duration", "function_name", "${__LambdaName__}", { "stat": "Minimum" } ],
                              [ "..." ],
                              [ "...", { "stat": "Maximum" } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${__Region__}",
                          "period": 60,
                          "stat": "Average",
                          "title": "Requests - durations"
                      }
                  },
                  {
                      "height": 6,
                      "width": 12,
                      "y": 36,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH('{DT/LogsStreaming,function_name,type} function_name=\"${__LambdaName__}\" MetricName=\"Issues\"', 'Sum', 60)", "label": "Issues - [${!PROP('Dim.type')}]", "id": "e1", "region": "${__Region__}" } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${__Region__}",
                          "stat": "Sum",
                          "period": 60,
                          "title": "Delivery - issues"
                      }
                  },
                  {
                      "height": 6,
                      "width": 12,
                      "y": 24,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ "DT/LogsStreaming", "Log attr trimmed", "function_name", "${__LambdaName__}" ],
                              [ ".", "Log content trimmed", ".", "." ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${__Region__}",
                          "period": 60,
                          "title": "Logs - trimmed",
                          "stat": "Sum"
                      }
                  },
                  {
                      "height": 6,
                      "width": 12,
                      "y": 24,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ "DT/LogsStreaming", "Log age min", "function_name", "${__LambdaName__}", { "stat": "Minimum" }  ],
                              [ "DT/LogsStreaming", "Log age avg", "function_name", "${__LambdaName__}" ],
                              [ "DT/LogsStreaming", "Log age max", "function_name", "${__LambdaName__}", { "stat": "Maximum" }  ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "title": "Logs - age",
                          "region": "${__Region__}",
                          "period": 60,
                          "stat": "Average"
                      }
                  },
                  {
                      "height": 6,
                      "width": 12,
                      "y": 0,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "view": "timeSeries",
                          "stacked": false,
                          "metrics": [
                              [ "AWS/Lambda", "Invocations", "FunctionName", "${__LambdaName__}" ]
                          ],
                          "region": "${__Region__}",
                          "title": "Lambda - invocations"
                      }
                  },
                  {
                      "height": 6,
                      "width": 12,
                      "y": 0,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "view": "timeSeries",
                          "stacked": false,
                          "metrics": [
                              [ "AWS/Lambda", "Duration", "FunctionName", "${__LambdaName__}" ]
                          ],
                          "region": "${__Region__}",
                          "title": "Lambda - duration"
                      }
                  }
              ]
          }
        - __Region__: !Ref 'AWS::Region'
          __LambdaName__: !Ref Lambda

Outputs:
  LambdaArn:
    Description: "Lambda ARN"
    Value: !GetAtt Lambda.Arn

  FirehoseArn:
    Description: "Firehose ARN"
    Value: !GetAtt FirehoseLogStreams.Arn

  CloudWatchLogsRoleArn:
    Description: "CloudWatch Logs role ARN allowing streaming to Firehose"
    Value: !GetAtt CloudWatchLogsRole.Arn